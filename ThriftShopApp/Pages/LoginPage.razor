@page "/login/{target:alpha}"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager navManager
@using MongoDB.Bson
@inject ILoginService loginService

@inject HttpClient Http

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header text-center">
                    <h3>Login</h3>
                </div>
                <div class="card-body">
                    <EditForm EditContext="@_editContext" OnSubmit="@HandleSubmit">
                        <div class="form-group">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="userAuthentication.Email" placeholder="Enter your email" />
                        </div>

                        <div class="form-group">
                            <label for="password">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="userAuthentication.Password" placeholder="Enter your password" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100 mt-3">Login</button>
                        <button type="button" class="btn btn-secondary w-100 mt-3" @onclick="@Bypass">Bypass</button>
                    </EditForm>

                    <div class="text-center mt-3">
                        <button class="btn btn-link">Don't have an account? Sign up</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private UserAuthentication userAuthentication = new();
    private EditContext? _editContext;
    private User? user = null;
    [Parameter]
    public string target { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(userAuthentication);

    }

    private async Task HandleSubmit()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7077/api/Login", userAuthentication);
        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<User>();
            if (user != null)
            {
                loginService.Login(user);
                navManager.NavigateTo(target);
            }
        }
        else
        {
            // Handle login failure (e.g., show error message)
            Console.WriteLine("Login failed");
        }

    }

    private void Bypass()
    {
        var adminUser = new User
        {
            Name = "Admin User",
            Email = "admin@example.com",
            Password = "securepassword123"
        };

        // Adding mock purchased items
        adminUser.Purchases.AddRange(new List<Item>
        {
            new Item
            {
                Name = "Laptop",
                Price = 799.99,
                Description = "A powerful gaming laptop",
                Category = "Electronics",
                ImageUrl = "https://via.placeholder.com/150",
                SellerEmail = "seller1@example.com",
                Listed = DateTime.Now.AddDays(-10),
                Status = "Active"
            },
            new Item
            {
                Name = "Smartphone",
                Price = 499.99,
                Description = "Latest model smartphone",
                Category = "Electronics",
                ImageUrl = "https://via.placeholder.com/150",
                SellerEmail = "seller2@example.com",
                Listed = DateTime.Now.AddDays(-5),
                Status = "Active"
            }
        });

        // Adding mock selling items
        adminUser.Selling.AddRange(new List<Item>
        {
            new Item
            {
                Name = "Wireless Headphones",
                Price = 129.99,
                Description = "Noise-cancelling wireless headphones",
                Category = "Accessories",
                ImageUrl = "https://via.placeholder.com/150",
                SellerEmail = adminUser.Email,
                Listed = DateTime.Now.AddDays(-2),
                Status = "Active"
            },
            new Item
            {
                Name = "Bluetooth Speaker",
                Price = 89.99,
                Description = "Portable bluetooth speaker with great sound",
                Category = "Accessories",
                ImageUrl = "https://via.placeholder.com/150",
                SellerEmail = adminUser.Email,
                Listed = DateTime.Now.AddDays(-3),
                Status = "Active"
            }
        });

        loginService.Login(adminUser);
        navManager.NavigateTo(target);
    }

}
