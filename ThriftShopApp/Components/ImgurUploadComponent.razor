@inject IImgurService ImgurService
@inject IJSRuntime JSRuntime

<div class="bg-dark text-light p-3 rounded" style="max-width: 300px;">
    <div class="mb-2">
        <InputFile OnChange="@OnFileSelected" class="form-control form-control-sm" />
    </div>
    <button @onclick="UploadImage"
            class="btn btn-primary btn-sm w-100"
            disabled="@(!_fileSelected)">
        Upload
    </button>

    @if (!string.IsNullOrEmpty(Value))
    {
        <div class="mt-3 text-center">
            <img src="@Value" alt="Uploaded Image" class="img-fluid rounded" style="max-height: 150px;" />
            <p class="mt-2 mb-0 small">
                <a href="@Value" target="_blank" class="text-info">View Image</a>
            </p>
        </div>
    }
</div>

@code {
    private bool _fileSelected = false;
    private IBrowserFile? _selectedFile;

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
        _fileSelected = true;
    }

    private async Task UploadImage()
    {
        if (_selectedFile != null)
        {
            try
            {
                using var stream = _selectedFile.OpenReadStream();
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var imageData = ms.ToArray();
                var uploadedUrl = await ImgurService.UploadImageAsync(imageData);
                Value = uploadedUrl;
                await ValueChanged.InvokeAsync(uploadedUrl);
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error uploading image: {ex.Message}");
                // Optional: Add error handling logic
            }
        }
    }
}