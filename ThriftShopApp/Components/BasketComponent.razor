@inject IItemHandlersService itemHandler

<div class="position-relative">
    <div class="btn btn-primary dropdown-toggle" @onclick="ToggleBasket" aria-expanded="@_showBasket">
        Basket
    </div>

    @if (_showBasket)
    {
        <div class="dropdown-menu show p-3 bg-light shadow"
             style="position: absolute; top: 100%; right: 0; z-index: 1050; max-height: 300px; overflow-y: auto; width: 300px;">
            @if (Basket != null && Basket.Any())
            {
                @foreach (var item in Basket)
                {
                    <div class="mb-2 item-div">
                        <span style="font-size:14px">@item.Name</span>
                        <hr/>
                    </div>
                }
                <button class="btn btn-primary w-100" @onclick="buyItems">Buy items</button>
            }
            else
            {
                <p class="mb-0">The basket is empty.</p>
            }
            <button class="btn btn-secondary mt-2 w-100" @onclick="ToggleBasket">Close</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<Item> Basket { get; set; } = new();

    [Parameter]
    public User? user { get; set; } 

    private bool _showBasket = false;

    private void ToggleBasket()
    {
        _showBasket = !_showBasket;
    }

    public async Task buyItems()
    {
        foreach (Item item in Basket)
        {
            item.BuyerEmail = user.Email;
            item.SoldTime = DateTime.Now;
            item.Status = "Sold";
        }
        user = await itemHandler.purchaseItems(Basket);
    }
}
