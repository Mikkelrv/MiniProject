<div class="position-relative">
    <div class="btn btn-primary dropdown-toggle" @onclick="ToggleBasket" aria-expanded="@_showBasket">
        Basket <span class="badge text-bg-secondary">@Basket?.Count()</span>
    </div>

    @if (_showBasket)
    {
        <div class="dropdown-menu show p-3 bg-light shadow" style=" width: 300px; position: absolute; top: 100%; right: 0; left: auto; z-index: 1050; width: 300px;">
            <!-- Adjusted the dropdown-menu width -->
            @if (Basket != null && Basket.Any())
            {
                @foreach (var item in Basket)
                {
                    <div class="mb-2 item-div">
                        <span style="font-size:12px">1x @item.Name</span>
                    </div>
                }
                <button class="btn btn-primary w-100">Buy items</button>
            }
            else
            {
                <p class="mb-0">The basket is empty.</p>
            }
            <button class="btn btn-secondary mt-2 w-100" @onclick="ToggleBasket">Close</button>
        </div>
    }
</div>

<style>
    .item-div {
        width: 100%; /* Ensure it spans the full width of the dropdown */
        max-width: 100%; /* Avoid unintended overflow */
        padding: 10px; /* Optional: Add padding for a better visual appearance */
        border: 1px solid #ddd; /* Optional: Add a border for differentiation */
        border-radius: 4px; /* Optional: Smooth corners */
        background-color: #f9f9f9; /* Optional: Background color */
    }

    .dropdown-menu {
        width: 300px; /* Set the width of the dropdown menu */
        max-width: 100%; /* Ensure it doesn't overflow its container */
    }
</style>

@code {
    [Parameter]
    public List<Item> Basket { get; set; }

    private bool _showBasket = false;

    private void ToggleBasket()
    {
        _showBasket = !_showBasket;
    }
}
